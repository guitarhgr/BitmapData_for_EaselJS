{
    "project": {
        "name": "BitmapData for EaselJS",
        "description": "BitmapData for EaselJS API documentation.",
        "version": "1.0.0",
        "url": "http://kudox.jp/java-script/createjs-easeljs-bitmapdata"
    },
    "files": {
        "bitmapdata-1.0.0.js": {
            "name": "bitmapdata-1.0.0.js",
            "modules": {},
            "classes": {
                "createjs.BitmapData": 1,
                "createjs.BitmapDataChannel": 1,
                "createjs.ColorTransform": 1
            },
            "fors": {},
            "namespaces": {
                "createjs": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "createjs.BitmapData": {
            "name": "createjs.BitmapData",
            "shortname": "BitmapData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "createjs",
            "file": "bitmapdata-1.0.0.js",
            "line": 19,
            "description": "BitmapData for EaselJSは、EalseJSにActionScript3.0と同様のBitmapDataクラスを提供します。BitmapDataクラスはDisplayObjectを継承していないため、実際にStage上に表示するにはBitmapクラスを使います。この流れはFlashと同様ですが、BitmapクラスのコンストラクタにはBitmapDataインスタンスではなく、BitmapDataインスタンスのcanvasプロパティを渡して下さい。",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "この引数を指定すると指定したオブジェクトが描画されたBitmapDataが作成されます。指定するオブジェクトは、読み込みが終わっている必要があります。塗りのBitmapDataを作成したい場合は、nullを指定して下さい。",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "width",
                    "description": "BitmapDataの幅です。imageがnullの場合のdefault値は300です。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "image.width"
                },
                {
                    "name": "height",
                    "description": "BitmapDataの高さです。imageがnullの場合のdefault値は150です。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "image.height"
                },
                {
                    "name": "fillColor",
                    "description": "塗りのBitmapDataを作成する場合に指定します。CSS文字列と0xAARRGGBB形式の16進数値が使えます。透明なBitmapDataを作成したい場合は、この引数を省略して下さい。",
                    "type": "String | uint",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(HTMLImageElement);\n_bitmap01 = new createjs.Bitmap(_bmd01.canvas);\n_stage.addChild(_bitmap01);\nvar width = 200;\nvar height = 200;\nvar fillColor = 0x80FF0000;\n_bmd02 = new createjs.BitmapData(null, width, height, fillColor);\n_bitmap02 = new createjs.Bitmap(_bmd02.canvas);\n_stage.addChild(_bitmap02);</code></pre>"
            ]
        },
        "createjs.BitmapDataChannel": {
            "name": "createjs.BitmapDataChannel",
            "shortname": "BitmapDataChannel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "createjs",
            "file": "bitmapdata-1.0.0.js",
            "line": 1599,
            "description": "BitmapDataChannelクラスは、赤、緑、青、アルファのいずれのチャンネルを使用するかを示す際に使用できる定数値を保持しています。メソッドを呼び出すとき、OR論理演算子を使ってBitmapDataChannel定数を結合することにより、複数のカラーチャンネルを同時に指定することができます。",
            "static": 1
        },
        "createjs.ColorTransform": {
            "name": "createjs.ColorTransform",
            "shortname": "ColorTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "createjs",
            "file": "bitmapdata-1.0.0.js",
            "line": 1655,
            "description": "ColorTransformクラスは、BitmapDataクラスのカラー値を調整する際に使用することができます。R, G, B, Aの各チャンネルで乗数値（Multiplier）とオフセット値（Offset）を保持します。ColorTransformオブジェクトを適用する際に各チャンネルに設定される値の算出方法は下記の通りです。<br>新しい値 = (古い値 * Multiplier) + Offset",
            "is_constructor": 1,
            "params": [
                {
                    "name": "redMultiplier",
                    "description": "赤チャンネルの乗数値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "greenMultiplier",
                    "description": "緑チャンネルの乗数値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "blueMultiplier",
                    "description": "青チャンネルの乗数値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "alphaMultiplier",
                    "description": "アルファチャンネルの乗数値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "redOffset",
                    "description": "赤チャンネルのオフセット値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "greenOffset",
                    "description": "緑チャンネルのオフセット値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "blueOffset",
                    "description": "青チャンネルのオフセット値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "alphaOffset",
                    "description": "アルファチャンネルのオフセット値です。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 11,
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 50,
            "description": "cache()されたDisplayObjectのサブクラスをBitmapDataとして取得します。このメソッドで得られるBitmapDataは、DisplayObjectのcacheの参照です。updateCache()を実行した場合は、取得したBitmapDataも更新されるため、updateImageData()を実行して下さい。",
            "static": 1,
            "itemtype": "method",
            "name": "getBitmapData",
            "params": [
                {
                    "name": "object",
                    "description": "BitmapDataとして取得したいDisplayObjectのサブクラスを指定します。DisplayObjectはcache()されている必要があります。",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "DisplayObjectのcacheをBitmapDataとして返します。",
                "type": "BitmapData"
            },
            "example": [
                "\n<pre><code>_shape = new createjs.Shape();\nvar g = _shape.graphics;\ng.f(&quot;rgba(0, 0, 255, 1)&quot;).dp(0, 0, 100, 5, 0.6, -90).ef();\n_shape.cache(-100, -100, 200, 200);\n_bmd01 = createjs.BitmapData.getBitmapData(_shape);\nvar colorTransform = new createjs.ColorTransform(1, 1, 0, 1, 255);\nvar rect = new createjs.Rectangle(0, 0, _bmd01.width &gt;&gt; 1, _bmd01.height);\n_bmd01.colorTransform(rect, colorTransform);\n_stage.addChild(_shape);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 85,
            "description": "[read only] BitmapDataの幅です。",
            "itemtype": "property",
            "name": "width",
            "type": "uint",
            "readonly": "",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 95,
            "description": "[read only] BitmapDataの高さです。",
            "itemtype": "property",
            "name": "height",
            "type": "uint",
            "readonly": "",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 105,
            "description": "[read only] BitmapDataの位置とサイズを示すRectangleです。",
            "itemtype": "property",
            "name": "rect",
            "type": "Rectangle",
            "readonly": "",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 118,
            "description": "BitmapDataが描画されるHTMLCanvasElementです。",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 125,
            "description": "canvasのCanvasRenderingContext2Dです。",
            "itemtype": "property",
            "name": "context",
            "type": "CanvasRenderingContext2D",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 132,
            "description": "BitmapDataの名前です。toString()で使用されます。",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 143,
            "description": "ソースオブジェクトにFilterを適用し、現在のBitmapDataに貼付けます。sourceには、現在のBitmapDataを指定することもできます。",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sourceRect",
                    "description": "ソースオブジェクトの範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "destPoint",
                    "description": "Filterを適用したイメージが配置される左上の座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "filter",
                    "description": "適用するFilterを指定します。",
                    "type": "Filter"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\nvar source = _bmd01;\nvar sourceRect = new createjs.Rectangle(90, 20, 200, 200);\nvar destPoint = new createjs.Point(90, 20);\nvar filter = new createjs.BlurFilter(8, 8, 1);\n_bmd01.applyFilter(source, sourceRect, destPoint, filter);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 182,
            "description": "指定された領域のピクセルを透明な黒にして消去します。",
            "itemtype": "method",
            "name": "clearRect",
            "params": [
                {
                    "name": "x",
                    "description": "消去する領域の左上x座標です。",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "消去する領域の左上y座標です。",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "消去する領域の幅です。",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "消去する領域の高さです。",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<pre><code>var x = 50;\nvar y = 50;\nvar width = 100;\nvar height = 100;\n_bmd01.clearRect(x, y, width, height);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 201,
            "description": "現在のBitmapDataのクローンを作成します。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "現在のBitmapDataのクローンです。",
                "type": "BitmapData"
            },
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 218,
            "description": "ColorTransformオブジェクトを使用して、BitmapDataの特定領域のカラー値を調整します。",
            "itemtype": "method",
            "name": "colorTransform",
            "params": [
                {
                    "name": "rect",
                    "description": "ColorTransformを適用する領域を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "colorTransform",
                    "description": "適用するColorTransformオブジェクトです。",
                    "type": "ColorTransform"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\nvar halfW = _image01.width &gt;&gt; 1;\nvar rect = new createjs.Rectangle(halfW, 0, halfW, _image01.height);\nvar colorTransform = new createjs.ColorTransform(0.5, 1.5, 1.5);\n_bmd01.colorTransform(rect, colorTransform);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 252,
            "description": "現在のBitmapDataと引数のオブジェクトのピクセルを比較し、その差分ピクセルを持つ新しいBitmapDataを返します。",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "otherSource",
                    "description": "比較に使用するオブジェクトです。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                }
            ],
            "return": {
                "description": "2つのオブジェクトの幅と高さが等しければ、2つのオブジェクトの差分ピクセルを持つ新しいBitmapDataを返します。<br>幅と高さ、及びすべてのピクセルが等しい場合、数値 0 を返します。<br>幅が等しくない場合、数値 -3 を返します。<br>幅が等しく、高さが等しくない場合、数値 -4 を返します。",
                "type": "BitmapData | int"
            },
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\n_bmd03 = new createjs.BitmapData(_image02);\nvar otherSource = _bmd03;\n_bmd02 = _bmd01.compare(otherSource);\n_bitmap01 = new createjs.Bitmap(_bmd01.canvas);\n_bitmap02 = new createjs.Bitmap(_bmd02.canvas);\n_bitmap03 = new createjs.Bitmap(_bmd03.canvas);\n_bitmap01.x = 10;\n_bitmap02.x = 220;\n_bitmap03.x = 430;\n_bitmap01.y = _bitmap02.y = _bitmap03.y = 80;</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 313,
            "description": "ソースオブジェクトの1つのチャンネルを現在のBitmapDataのチャンネルに転送します。",
            "itemtype": "method",
            "name": "copyChannel",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sourceRect",
                    "description": "ソースオブジェクトの範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "destPoint",
                    "description": "データが配置される左上の座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "sourceChannel",
                    "description": "ソースオブジェクトのチャンネルを指定します。BitmapDataChannelクラスの定数が使用できます。",
                    "type": "Uint"
                },
                {
                    "name": "destChannel",
                    "description": "転送先のチャンネルを指定します。BitmapDataChannelクラスの定数が使用できます。",
                    "type": "Uint"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\nvar source = _image02;\nvar sourceRect = new createjs.Rectangle(0, 0, _image02.width, _image02.height);\nvar destPoint = new createjs.Point();\nvar channel = Object.create(createjs.BitmapDataChannel);\nvar sourceChannel = channel.ALPHA;\nvar destChannel = channel.BLUE;\n_bmd01.copyChannel(source, sourceRect, destPoint, sourceChannel, destChannel);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 353,
            "description": "ソースオブジェクトを現在のBitmapDataに貼り付けます。",
            "itemtype": "method",
            "name": "copyPixels",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sourceRect",
                    "description": "ソースオブジェクトの範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "destPoint",
                    "description": "貼り付け先の左上座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "alphaSource",
                    "description": "アルファチャンネルのソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "alphaPoint",
                    "description": "alphaSourceの左上座標を示すPointです。",
                    "type": "Point",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "mergeAlpha",
                    "description": "貼り付け時にアルファチャンネルを使用するにはtrueを指定します。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(null, 640, 360, 0xCCCCCC);\nvar source = _image01;\nvar sourceRect = new createjs.Rectangle(0, 0, _image01.width, _image01.height);\nvar destPoint;\nvar alphaSource = _maskImage;\nvar alphaPoint = new createjs.Point();\nvar mergeAlpha = true;\ndestPoint = new createjs.Point(10, 80);\n_bmd01.copyPixels(source, sourceRect, destPoint);\ndestPoint = new createjs.Point(220, 80);\n_bmd01.copyPixels(source, sourceRect, destPoint, alphaSource);\ndestPoint = new createjs.Point(430, 80);\n_bmd01.copyPixels(source, sourceRect, destPoint, alphaSource, alphaPoint, mergeAlpha);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 414,
            "description": "BitmapDataオブジェクトの格納に使用されるメモリを解放します。",
            "itemtype": "method",
            "name": "dispose",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 424,
            "description": "ソースオブジェクトを現在のBitmapDataに描画します。",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "matrix",
                    "description": "ソースオブジェクトに適用する変換行列を指定します。変換行列を指定したくない場合はnullを指定して下さい。",
                    "type": "Matrix2D",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "colorTransform",
                    "description": "ソースオブジェクトに適用するColorTransformオブジェクトを指定します。ColorTransformを適用したくない場合はnullを指定して下さい。",
                    "type": "ColorTransform",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "compositeOperation",
                    "description": "描画時のcanvasのglobalCompositeOperationの値です。",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "clipRect",
                    "description": "描画時のクリッピング領域を示すRectangleです。",
                    "type": "Rectangle",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "smoothing",
                    "description": "描画時にスムージングを適用するかをBool値で指定します。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n<pre><code>var matrix = new createjs.Matrix2D(1, 0, 0, 1, -_sourceRect.width &gt;&gt; 1, -_sourceRect.height &gt;&gt; 1);\nvar rotation = Math.random() * 360 &gt;&gt; 0;\nmatrix.rotate(rotation * createjs.Matrix2D.DEG_TO_RAD);\nvar scale = Math.random() * 0.5 + 0.5;\nmatrix.scale(scale, scale);\nvar tx = Math.random() * _bmd01.width &gt;&gt; 0;\nvar ty = Math.random() * _bmd01.height &gt;&gt; 0;\nmatrix.translate(tx, ty);\nvar red = (Math.random() * 224 &gt;&gt; 0) + 32;\nvar green = (Math.random() * 224 &gt;&gt; 0) + 32;\nvar blue = (Math.random() * 224 &gt;&gt; 0) + 32;\nvar colorTransform = new createjs.ColorTransform(0, 0, 0, 1, red, green, blue);\nvar compositeOperation = &quot;lighter&quot;;\nvar clipRect = null;\nvar smoothing = true;\n_bmd01.draw(_source, matrix, colorTransform, compositeOperation, clipRect, smoothing);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 495,
            "description": "ソースオブジェクトを現在のBitmapDataに描画します。変換行列やColorTransformを使用しないので、draw()よりも高速に動作します。このメソッドは、CanvasRenderingContext2DのdrawImage()と同様の動作を提供します。",
            "itemtype": "method",
            "name": "drawImage",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sx",
                    "description": "ソースオブジェクトの左上x座標です。第6引数以降を省略した場合、この引数はdxとして動作します。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "sy",
                    "description": "ソースオブジェクトの左上y座標です。第6引数以降を省略した場合、この引数はdyとして動作します。",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "sw",
                    "description": "ソースオブジェクトの幅です。第6引数以降を省略した場合、この引数はdwとして動作します。",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sh",
                    "description": "ソースオブジェクトの高さです。第6引数以降を省略した場合、この引数はdhとして動作します。",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "dx",
                    "description": "描画先の左上x座標です。",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "dy",
                    "description": "描画先の左上y座標です。",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "dw",
                    "description": "描画時の幅です。",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "dh",
                    "description": "描画時の高さです。",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 534,
            "description": "BitmapDataのサイズを変更します。引数のRectangleは、Filter.getBounds()の戻り値に合わせています。例として、上下左右に8pxずつ拡げたい場合は、new createjs.Rectangle(-8, -8, 16, 16)を指定します。",
            "itemtype": "method",
            "name": "expand",
            "params": [
                {
                    "name": "rect",
                    "description": "BitmapDataのサイズ変更に使用するRectangleです。Filterを使用する場合は、Filter.getBounds()の戻り値をそのまま渡します。",
                    "type": "Rectangle"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\nvar source = _bmd01;\nvar filter = new createjs.BlurFilter(16, 16, 1);\nvar rect = filter.getBounds();\n_bmd01.expand(rect);\nvar sourceRect = new createjs.Rectangle(0, 0, _bmd01.width, _bmd01.height);\nvar destPoint = new createjs.Point();\n_bmd01.applyFilter(source, sourceRect, destPoint, filter);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 561,
            "description": "BitmapDataの特定領域を指定されたカラー値で塗りつぶします。",
            "itemtype": "method",
            "name": "fillRect",
            "params": [
                {
                    "name": "rect",
                    "description": "塗りつぶす範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "color",
                    "description": "塗りつぶしのカラー値です。CSS文字列と0xAARRGGBB形式の16進数値が使えます。16進数値で指定する際にアルファ値として0を指定した場合は、0xRRGGBBとして処理を行います。例として、0x00FF0000を指定した場合は、0xFF0000として処理されます。ピクセルを透明にしたい場合はclearRect()を使用して下さい。",
                    "type": "String | uint"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(null, 200, 200);\n_bmd02 = _bmd01.clone();\nvar rect = new createjs.Rectangle(0, 0, 200, 200);\nvar color01 = 0x80FF0000;\n_bmd01.fillRect(rect, color01);\nvar color02 = createjs.Graphics.getRGB(0, 0, 255, 0.5)\n_bmd02.fillRect(rect, color02);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 595,
            "description": "指定した座標を始点として、上下左右に連続した色をバケツツールのように塗りつぶします。",
            "itemtype": "method",
            "name": "floodFill",
            "params": [
                {
                    "name": "x",
                    "description": "塗りつぶしの始点となるx座標です。",
                    "type": "Uint"
                },
                {
                    "name": "y",
                    "description": "塗りつぶしの始点となるy座標です。",
                    "type": "Uint"
                },
                {
                    "name": "color",
                    "description": "塗りつぶしのカラー値です。0xAARRGGBB形式の16進数値のみ使用できます。",
                    "type": "Uint"
                }
            ],
            "example": [
                "\n<pre><code>function clickHandler(evt) {\n _bmd01.floodFill(evt.stageX, evt.stageY, 0xFFCCCCCC);\n _stage.update();\n}</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 671,
            "description": "引数findColorにtrueを指定した場合は、指定された色のピクセルを囲むRectangleを返します。findColorにfalseを指定した場合は、指定された色ではないピクセルを囲むRectangleを返します。",
            "itemtype": "method",
            "name": "getColorBoundsRect",
            "params": [
                {
                    "name": "mask",
                    "description": "ピクセルのカラー値をマスクする16進数値を指定します。ピクセルのカラー値とこの16進数値は、AND論理演算子でつなげられます。",
                    "type": "Uint"
                },
                {
                    "name": "color",
                    "description": "対象とするカラー値を指定します。0xAARRGGBB形式の16進数値のみ使用できます。",
                    "type": "Uint"
                },
                {
                    "name": "findColor",
                    "description": "trueを指定した場合、指定された色のピクセルを囲むRectangleを返します。falseを指定した場合、指定された色ではないピクセルを囲むRectangleを返します。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "条件に合致したすべてのピクセルを囲むRectangleです。条件に合致するピクセルがない場合は、Rectangle(0, 0, 0, 0)を返します。",
                "type": "Rectangle"
            },
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 714,
            "description": "指定された座標のRGBカラー値を数値で返します。",
            "itemtype": "method",
            "name": "getPixel",
            "params": [
                {
                    "name": "x",
                    "description": "カラー値を取得するx座標です。",
                    "type": "Uint"
                },
                {
                    "name": "y",
                    "description": "カラー値を取得するy座標です。",
                    "type": "Uint"
                }
            ],
            "return": {
                "description": "RGBカラー値を表す数値です。",
                "type": "Uint"
            },
            "example": [
                "\n<pre><code>var color = forcemap.getPixel(x, y);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 741,
            "description": "指定された座標のARGBカラー値を数値で返します。",
            "itemtype": "method",
            "name": "getPixel32",
            "params": [
                {
                    "name": "x",
                    "description": "カラー値を取得するx座標です。",
                    "type": "Uint"
                },
                {
                    "name": "y",
                    "description": "カラー値を取得するy座標です。",
                    "type": "Uint"
                }
            ],
            "return": {
                "description": "ARGBカラー値を表す数値です。",
                "type": "Uint"
            },
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 767,
            "description": "引数で指定された領域のピクセルデータをUint8ClampedArray（旧ブラウザではCanvasPixelArray）で返します。戻り値のピクセルデータは、R, G, B, Aの並びになっています。",
            "itemtype": "method",
            "name": "getPixels",
            "params": [
                {
                    "name": "rect",
                    "description": "ピクセルデータを取得する範囲を示すRectangleです。",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "指定された範囲のimageData.dataプロパティを返します。",
                "type": "Uint8ClampedArray"
            },
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\n_bmd02 = new createjs.BitmapData(_image02);\nvar rect = new createjs.Rectangle(20, 20, 160, 160);\nvar data01 = _bmd01.getPixels(rect);\nvar data02 = _bmd02.getPixels(rect);\nfor (var i = 0, l = data01.length; i &lt; l; i += 4) {\n if (i / 4 % 2 !== 0) {\n   var r = i;\n   var g = i + 1;\n   var b = i + 2;\n   var a = i + 3;\n   data01[r] = data02[r];\n   data01[g] = data02[g];\n   data01[b] = data02[b];\n   data01[a] = data02[a];\n }\n}\n_bmd01.setPixels(rect, data01);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 796,
            "description": "BitmapDataのヒストグラムを2次元配列で返します。戻り値の配列は、[[R], [G], [B], [A]]の形式で4つの配列を格納しています。各カラー値の配列は、0～255のindexを持っており、そこにカラー値のポピュレーションカウントを格納しています。",
            "itemtype": "method",
            "name": "histogram",
            "params": [
                {
                    "name": "hRect",
                    "description": "ヒストグラムを取得する範囲を示すRectangleです。",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "BitmapDataのヒストグラムを表す2次元配列です。",
                "type": "Array"
            },
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 821,
            "description": "アルファチャンネルを含めたピクセルレベルの衝突判定を行います。対象オブジェクトがPoint, Rectangleの場合には第4引数以降は必要ありません。",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "firstPoint",
                    "description": "任意の座標空間における現在のBitmapDataの座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "firstAlphaThreshold",
                    "description": "現在のBitmapDataで不透明とするアルファチャンネルのしきい値です。",
                    "type": "Uint"
                },
                {
                    "name": "secondObject",
                    "description": "衝突判定の対象となるオブジェクトです。",
                    "type": "Point | Rectangle | BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "secondObjectPoint",
                    "description": "secondObjectの座標を示すPointです。",
                    "type": "Point",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "secondAlphaThreshold",
                    "description": "secondObjectで不透明とするアルファチャンネルのしきい値です。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "衝突している場合はtrue、していない場合はfalseを返します。",
                "type": "Boolean"
            },
            "example": [
                "\n<pre><code>var firstPoint = new createjs.Point(_bitmap01.x, _bitmap01.y);\nvar firstAlphaThreshold = 0xFF;\nvar secondObject = _shape_bmd;\nvar secondObjectPoint = new createjs.Point(_shape.x - 20, _shape.y - 20);\nvar secondAlphaThreshold = 0x80;\nif (_bmd01.hitTest(firstPoint, firstAlphaThreshold, secondObject, secondObjectPoint, secondAlphaThreshold)) {\n if (!_isHitting) {\n   changeColor(&quot;rgba(0,255,0,0.75)&quot;);\n }\n} else {\n if (_isHitting) {\n   changeColor(&quot;rgba(0,0,255,0.75)&quot;);\n }\n}</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 937,
            "description": "現在のBitmapDataとソースオブジェクトをチャンネルごとにブレンドします。",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sourceRect",
                    "description": "ソースオブジェクトの範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "destPoint",
                    "description": "マージ先の左上座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "redMultiplier",
                    "description": "赤チャンネル値に乗算する数値です。",
                    "type": "Uint"
                },
                {
                    "name": "greenMultiplier",
                    "description": "緑チャンネル値に乗算する数値です。",
                    "type": "Uint"
                },
                {
                    "name": "blueMultiplier",
                    "description": "青チャンネル値に乗算する数値です。",
                    "type": "Uint"
                },
                {
                    "name": "alphaMultiplier",
                    "description": "アルファチャンネル値に乗算する数値です。",
                    "type": "Uint"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\n_bmd02 = _bmd01.clone();\n_bmd03 = new createjs.BitmapData(_image02);\nvar source = _bmd03;\nvar sourceRect = new createjs.Rectangle(0, 0, _image02.width, _image02.height);\nvar destPoint = new createjs.Point();\nvar redMultiplier = 192;\nvar greenMultiplier = 64;\nvar blueMultiplier = 128;\nvar alphaMultiplier = 128;\n_bmd02.merge(source, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 987,
            "description": "ランダムノイズを生成します。",
            "itemtype": "method",
            "name": "noise",
            "params": [
                {
                    "name": "low",
                    "description": "チャンネルごとに生成する最小値です。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "high",
                    "description": "チャンネルごとに生成する最大値です。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "255"
                },
                {
                    "name": "channelOptions",
                    "description": "対象とするチャンネルを指定します。BitmapDataChannelクラスの定数が使え、OR論理演算子で複数のチャンネルを組み合わせることができます。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "7"
                },
                {
                    "name": "grayScale",
                    "description": "ノイズをグレイスケールにするかをBool値を指定します。trueにした場合、アルファチャンネルを除いたすべてのチャンネルが同じ値となります。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(null, 200, 200);\nvar low = 128;\nvar high = 200;\nvar channel = Object.create(createjs.BitmapDataChannel);\nvar channelOptions = channel.BLUE | channel.ALPHA;\nvar grayScale = false;\n_bmd01.noise(low, high, channelOptions, grayScale);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1032,
            "description": "カラーパレットデータ配列を使用して、BitmapDataのカラー値をマッピングします。パレットデータ配列でnullを指定したチャンネルでは、ソースオブジェクトのチャンネルが使用されます。各チャンネルのパレットデータ配列には、256個の値が含まれている必要があります。",
            "itemtype": "method",
            "name": "paletteMap",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sourceRect",
                    "description": "ソースオブジェクトの範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "destPoint",
                    "description": "マッピング先の左上座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "redArray",
                    "description": "赤チャンネルのマッピングに使用するパレットデータ配列です。",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "greenArray",
                    "description": "緑チャンネルのマッピングに使用するパレットデータ配列です。",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "blueArray",
                    "description": "青チャンネルのマッピングに使用するパレットデータ配列です。",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "alphaArray",
                    "description": "アルファチャンネルのマッピングに使用するパレットデータ配列です。",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\nvar source = _bmd01;\nvar sourceRect = new createjs.Rectangle(64, 48, 256, 144);\nvar destPoint = new createjs.Point(sourceRect.x, sourceRect.y);\nvar redArray = [], greenArray = [], blueArray = [], alphaArray = null;\nfor (var i = 0, l = 256; i &lt; l; i++) {\n redArray[i] = (255 - i) &lt;&lt; 16;\n greenArray[i] = (255 - i) &lt;&lt; 8;\n blueArray[i] = 255 - i;\n}\n_bmd01.paletteMap(source, sourceRect, destPoint, redArray, greenArray, blueArray, alphaArray);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1086,
            "description": "PerlinNoiseを生成します。",
            "itemtype": "method",
            "name": "perlinNoise",
            "params": [
                {
                    "name": "baseX",
                    "description": "x方向で使用する周波数です。",
                    "type": "Number"
                },
                {
                    "name": "baseY",
                    "description": "y方向で使用する周波数です。",
                    "type": "Number"
                },
                {
                    "name": "numOctaves",
                    "description": "PerlinNoiseを作成するために組み合わせるオクターブの数です。オクターブ数を大きくすると、よりきめ細かいノイズを作成できますが、その分、処理に時間がかかります。",
                    "type": "Uint"
                },
                {
                    "name": "randomSeed",
                    "description": "ノイズの生成に使用するランダムシード（乱数の種）を指定します。同じランダムシードからは、毎回同じ結果が得られます。",
                    "type": "Int"
                },
                {
                    "name": "stitch",
                    "description": "trueを指定した場合、タイリングに適したシームレスなPerlinNoiseを生成しますが、その分、処理に時間がかかります。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "fractalNoise",
                    "description": "trueを指定した場合、フラクタルノイズを生成します。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "channelOptions",
                    "description": "対象とするチャンネルを指定します。BitmapDataChannelクラスの定数が使え、OR論理演算子で複数のチャンネルを組み合わせることができます。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "7"
                },
                {
                    "name": "grayScale",
                    "description": "trueを指定した場合、RGBの各カラーチャンネルに同じ値を設定して、グレースケールのノイズが作成されます。この値はアルファチャンネルには影響しません。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "offsets",
                    "description": "各オクターブのオフセット値を格納した配列です。オフセット値はPointインスタンスで指定します。",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "interpolateType",
                    "description": "ノイズを滑らかにする補間のタイプを\"linear\"と\"cos\"から選択できます。\"cos\"の方が滑らかな結果が得られますが、その分、処理に時間がかかります。デフォルト値は\"linear\"です。",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"linear\""
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(null, 320, 240);\nvar baseX = _bmd01.width;\nvar baseY = _bmd01.height;\nvar numOctaves = 5;\nvar randomSeed = 7;\nvar stitch = false;\nvar fractalNoise = false;\nvar channel = Object.create(createjs.BitmapDataChannel);\nvar channelOptions = channel.RED | channel.GREEN | channel.BLUE;\nvar grayScale = true;\nvar offsets = [new createjs.Point(0, 0), new createjs.Point(0, 0)];\nvar interpolateType = \"cos\";\n_bmd01.perlinNoise(baseX, baseY, numOctaves, randomSeed, stitch, fractalNoise, channelOptions, grayScale, offsets, interpolateType);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1282,
            "description": "現在のBitmapDataからソースオブジェクトへのピクセルディゾルブを実行します。",
            "itemtype": "method",
            "name": "pixelDissolve",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sourceRect",
                    "description": "ソースオブジェクトの範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "destPoint",
                    "description": "ディゾルブ先の左上座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "buffer",
                    "description": "連続したピクセルディゾルブを実行したい場合は、pixelDissolve()の戻り値のbuffer配列を指定します。",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "numPixels",
                    "description": "1回の処理で置き換えるピクセル数です。デフォルト値は、sourceRect.width * souceRect.height / 30 です。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fillColor",
                    "description": "ソースオブジェクトが現在のBitmapDataの場合に使用されるカラー値を0xAARRGGBB形式の16進数値で指定します。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "buffer配列を返します。この戻り値の配列を第4引数に指定することで連続したピクセルディゾルブを実行できます。ピクセルディゾルブが終了した際には数値 0 を返します。",
                "type": "Array"
            },
            "example": [
                "\n<pre><code>function tickHandler(evt) {\n if (_buffer === 0) {\n   return;\n }\n var sourceRect = new createjs.Rectangle(0, 0, _source.width, _source.height);\n var destPoint = new createjs.Point(sourceRect.x, sourceRect.y);\n var numPixels = 600;\n var fillColor = null\n _buffer = _bmd01.pixelDissolve(_source, sourceRect, destPoint, _buffer, numPixels, fillColor);\n _stage.update();\n}</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1368,
            "description": "指定されたピクセル量だけイメージをスクロールします。スクロール領域外のエッジ領域は変わらずにそのままになります。",
            "itemtype": "method",
            "name": "scroll",
            "params": [
                {
                    "name": "x",
                    "description": "x軸方向のスクロール量です。",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "y軸方向のスクロール量です。",
                    "type": "Int"
                }
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1381,
            "description": "指定された座標のピクセルに新しいカラー値を設定します。アルファチャンネルの値は現在の値が保たれます。setPixel()の実行結果を実際にBitmapDataに反映させるにはupdateContext()を実行する必要があります。",
            "itemtype": "method",
            "name": "setPixel",
            "params": [
                {
                    "name": "x",
                    "description": "カラー値を設定するx座標です。",
                    "type": "Uint"
                },
                {
                    "name": "y",
                    "description": "カラー値を設定するy座標です。",
                    "type": "Uint"
                },
                {
                    "name": "color",
                    "description": "指定したピクセルに設定するカラー値です。0xRRGGBB形式の16進数値のみ使用できます。",
                    "type": "Uint"
                }
            ],
            "example": [
                "\n<pre><code>bmd.setPixel(x, y, 0x0099FF);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1407,
            "description": "指定された座標のピクセルにアルファチャンネルを含めた新しいカラー値を設定します。setPixel32()の実行結果を実際にBitmapDataに反映させるにはupdateContext()を実行する必要があります。",
            "itemtype": "method",
            "name": "setPixel32",
            "params": [
                {
                    "name": "x",
                    "description": "カラー値を設定するx座標です。",
                    "type": "Uint"
                },
                {
                    "name": "y",
                    "description": "カラー値を設定するy座標です。",
                    "type": "Uint"
                },
                {
                    "name": "color",
                    "description": "指定したピクセルに設定するカラー値です。0xAARRGGBB形式の16進数値のみ使用できます。",
                    "type": "Uint"
                }
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1432,
            "description": "指定された範囲のピクセルを指定された配列のデータで差し替えます。",
            "itemtype": "method",
            "name": "setPixels",
            "params": [
                {
                    "name": "rect",
                    "description": "ピクセルデータを差し替える範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "inputArray",
                    "description": "差し替えるピクセルデータを配列で指定します。ピクセルデータの並びは、R, G, B, Aの順番にする必要があります。",
                    "type": "Array"
                }
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1449,
            "description": "指定されたしきい値でBitmapDataのピクセル値をテストし、その合否によってピクセルに新たなカラー値をセットします。",
            "itemtype": "method",
            "name": "threshold",
            "params": [
                {
                    "name": "source",
                    "description": "ソースとなるオブジェクトを指定します。",
                    "type": "BitmapData | DisplayObject | Stage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "sourceRect",
                    "description": "ソースオブジェクトの範囲を示すRectangleです。",
                    "type": "Rectangle"
                },
                {
                    "name": "destPoint",
                    "description": "ピクセルの置き換え先の左上座標を示すPointです。",
                    "type": "Point"
                },
                {
                    "name": "operation",
                    "description": "ピクセルのテストに使う比較演算子を文字列で指定します。指定することができる値は、\"<\", \"<=\", \">\", \">=\", \"==\", \"!=\"です。",
                    "type": "String"
                },
                {
                    "name": "threshold",
                    "description": "しきい値となるカラー値を指定します。0xAARRGGBB形式の16進数値のみ使用できます。",
                    "type": "Uint"
                },
                {
                    "name": "color",
                    "description": "テストに合格した際にセットされる新しいカラー値を指定します。0xAARRGGBB形式の16進数値のみ使用できます。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "mask",
                    "description": "範囲を設定するマスク値を指定します。0xAARRGGBB形式の16進数値のみ使用できます。",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copySource",
                    "description": "比較結果がfalseの場合にソースオブジェクトのピクセルを現在のBitmapDataにコピーするかをBool値で指定します。",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n<pre><code>_bmd01 = new createjs.BitmapData(_image01);\nvar source = _bmd01;\nvar halfW = _bmd01.width >> 1;\nvar sourceRect = new createjs.Rectangle(halfW, 0, halfW, _bmd01.height);\nvar destPoint = new createjs.Point(sourceRect.x, sourceRect.y);\nvar operation = &quot;&lt;&quot;;\nvar threshold = 0xFFEE0000;\nvar color = 0x00000000;\nvar mask = 0xFFFF0000;\nvar copySource = false;\n_bmd01.threshold(source, sourceRect, destPoint, operation, threshold, color, mask, copySource);</code></pre>"
            ],
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1544,
            "description": "BitmapDataの文字列表現を返します。nameプロパティの値が使用されます。",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "BitmapDataの文字列表現です。",
                "type": "String"
            },
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1553,
            "description": "内部に保持しているimageDataの内容でcontextを更新します。setPixel(), setPixel32()の処理を行った後は、このメソッドを実行する必要があります。updateContext()を実行することでsetPixel(), setPixel32()で行った処理がBitmapDataに反映されます。",
            "itemtype": "method",
            "name": "updateContext",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1561,
            "description": "内部に保持しているimageDataを最新の状態に更新します。contextを直接操作した場合やgetBitmapData()で取得したcacheをupdateCache()した場合には、このメソッドを実行する必要があります。",
            "itemtype": "method",
            "name": "updateImageData",
            "class": "createjs.BitmapData",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1605,
            "description": "アルファチャンネルを表す定数です。",
            "static": 1,
            "itemtype": "property",
            "name": "ALPHA",
            "type": "uint",
            "default": "8",
            "class": "createjs.BitmapDataChannel",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1614,
            "description": "青チャンネルを表す定数です。",
            "static": 1,
            "itemtype": "property",
            "name": "BLUE",
            "type": "uint",
            "default": "4",
            "class": "createjs.BitmapDataChannel",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1623,
            "description": "緑チャンネルを表す定数です。",
            "static": 1,
            "itemtype": "property",
            "name": "GREEN",
            "type": "uint",
            "default": "2",
            "class": "createjs.BitmapDataChannel",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1632,
            "description": "赤チャンネルを表す定数です。",
            "static": 1,
            "itemtype": "property",
            "name": "RED",
            "type": "uint",
            "default": "1",
            "class": "createjs.BitmapDataChannel",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1681,
            "description": "ColortransformオブジェクトのRGBカラー値を返します。このプロパティに値を設定する際には、0xRRGGBB形式の16進数値を使用して下さい。設定された値は、R, G, Bのoffset値として設定され、同時に3つのカラー乗数値 (redMultiplier, greenMultiplier, blueMultiplier) が0に設定されます。アルファチャンネルの乗数値とオフセット値は変更しません。",
            "itemtype": "property",
            "name": "color",
            "type": "uint",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1699,
            "description": "赤チャンネル値に乗算する数値です。",
            "itemtype": "property",
            "name": "redMultiplier",
            "type": "Number",
            "default": "1",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1707,
            "description": "緑チャンネル値に乗算する数値です。",
            "itemtype": "property",
            "name": "greenMultiplier",
            "type": "Number",
            "default": "1",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1715,
            "description": "青チャンネル値に乗算する数値です。",
            "itemtype": "property",
            "name": "blueMultiplier",
            "type": "Number",
            "default": "1",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1723,
            "description": "アルファチャンネル値に乗算する数値です。",
            "itemtype": "property",
            "name": "alphaMultiplier",
            "type": "Number",
            "default": "1",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1731,
            "description": "赤チャンネル値にredMultiplier値を乗算した後に加算する数値です。数値の範囲は -255～255です。",
            "itemtype": "property",
            "name": "redOffset",
            "type": "Number",
            "default": "0",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1739,
            "description": "緑チャンネル値にgreenMultiplier値を乗算した後に加算する数値です。数値の範囲は -255～255です。",
            "itemtype": "property",
            "name": "greenOffset",
            "type": "Number",
            "default": "0",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1747,
            "description": "青チャンネル値にblueMultiplier値を乗算した後に加算する数値です。数値の範囲は -255～255です。",
            "itemtype": "property",
            "name": "blueOffset",
            "type": "Number",
            "default": "0",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1755,
            "description": "アルファチャンネル値にalphaMultiplier値を乗算した後に加算する数値です。数値の範囲は -255～255です。",
            "itemtype": "property",
            "name": "alphaOffset",
            "type": "Number",
            "default": "0",
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1763,
            "description": "現在のColorTransformのクローンを作成します。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "現在のColorTransformのクローンです。",
                "type": "ColorTransform"
            },
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1781,
            "description": "引数のColorTransformと現在のColorTransformを連結します。",
            "itemtype": "method",
            "name": "concat",
            "params": [
                {
                    "name": "second",
                    "description": "現在のColorTransformオブジェクトと結合するColorTransformオブジェクトです。",
                    "type": "ColorTransform"
                }
            ],
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        },
        {
            "file": "bitmapdata-1.0.0.js",
            "line": 1797,
            "description": "ColorTransformのすべてのプロパティを列挙した文字列表現を返します。",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "ColorTransformの文字列表現です。",
                "type": "String"
            },
            "class": "createjs.ColorTransform",
            "namespace": "createjs"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " bitmapdata-1.0.0.js:11"
        }
    ]
}